// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2025 22:28:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TopDE
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TopDE_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [4:0] Regin;
reg Reset;
// wires                                               
wire ClockDIV;
wire [31:0] Instr;
wire [31:0] PC;
wire [31:0] Regout;

// assign statements (if any)                          
TopDE i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.ClockDIV(ClockDIV),
	.Instr(Instr),
	.PC(PC),
	.Regin(Regin),
	.Regout(Regout),
	.Reset(Reset)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 
// Regin[ 4 ]
initial
begin
	Regin[4] = 1'b0;
end 
// Regin[ 3 ]
initial
begin
	Regin[3] = 1'b1;
end 
// Regin[ 2 ]
initial
begin
	Regin[2] = 1'b0;
end 
// Regin[ 1 ]
initial
begin
	Regin[1] = 1'b1;
end 
// Regin[ 0 ]
initial
begin
	Regin[0] = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #10000 1'b1;
	Reset = #60000 1'b0;
end 
endmodule

